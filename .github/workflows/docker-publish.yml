name: Build and Publish Docker Images

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to use (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build-and-push:
    name: Build and push Docker images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set version variable
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl
          override: true

      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Install cross
        run: cargo binstall cross -y

      - name: Install Dioxus CLI
        run: cargo binstall dioxus-cli -y

      - name: Lowercase repository owner
        id: lowercase_repo
        run: echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr 'A-Z' 'a-z')" >> $GITHUB_ENV

      - name: Build for x86_64
        run: cross build --package web --features=server,dioxus/server --target x86_64-unknown-linux-musl --release

      - name: Save x86_64 binary
        run: |
          mkdir -p /tmp/pslink-save
          cp target/x86_64-unknown-linux-musl/release/web /tmp/pslink-save/

      - name: Cleaning up target directory
        run: cargo clean

      - name: Restore x86_64 binary
        run: |
          mkdir -p target/x86_64-unknown-linux-musl/release
          cp /tmp/pslink-save/web target/x86_64-unknown-linux-musl/release/

      - name: Build for aarch64
        run: cross build --package web --features=server,dioxus/server --target aarch64-unknown-linux-musl --release

      - name: Create bundle
        run: dx bundle --package web

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push x86_64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./x86_64.Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER }}/pslink:x86_64-latest
            ghcr.io/${{ env.REPO_OWNER }}/pslink:x86_64-${{ env.VERSION }}

      - name: Build and push aarch64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./aarch64.Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER }}/pslink:aarch64-latest
            ghcr.io/${{ env.REPO_OWNER }}/pslink:aarch64-${{ env.VERSION }}

      - name: Create and push multi-arch manifest
        run: |
          docker buildx imagetools create -t ghcr.io/${{ env.REPO_OWNER }}/pslink:latest \
            ghcr.io/${{ env.REPO_OWNER }}/pslink:aarch64-latest \
            ghcr.io/${{ env.REPO_OWNER }}/pslink:x86_64-latest
          
          docker buildx imagetools create -t ghcr.io/${{ env.REPO_OWNER }}/pslink:${{ env.VERSION }} \
            ghcr.io/${{ env.REPO_OWNER }}/pslink:aarch64-${{ env.VERSION }} \
            ghcr.io/${{ env.REPO_OWNER }}/pslink:x86_64-${{ env.VERSION }}